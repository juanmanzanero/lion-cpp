#include "lion/foundation/utils.hpp"

#include <random>

#include "gtest/gtest.h"


TEST(Utils_test, string_to_double_vector)
{
    {
        const std::string s = "1.02324355, 5.0624692 \n -7.354634, \n 5.23035234392, 243.242532425";
        std::vector<double> v = string_to_double_vector(s);
        std::vector<double> v_expected = { 1.02324355,5.0624692,-7.354634,5.23035234392,243.242532425 };
        EXPECT_EQ(v.size(), v_expected.size());
        for (size_t i = 0; i < v.size(); ++i)
            EXPECT_DOUBLE_EQ(v[i], v_expected[i]);
    }

    {
        const std::string s = "  nan 1.02324355; \n INF, NAN, Inf, Nan, \n 1.897989, 33, inf    ";
        std::vector<double> v = string_to_double_vector(s);
        const auto nan = std::numeric_limits<double>::quiet_NaN();
        const auto inf = std::numeric_limits<double>::infinity();
        std::vector<double> v_expected = { nan, 1.02324355, inf, nan, inf, nan, 1.897989, 33, inf };
        ASSERT_EQ(v.size(), v_expected.size());
        for (size_t i = 0; i < v.size(); ++i) {
            if (std::isnan(v_expected[i])) {
                EXPECT_TRUE(std::isnan(v[i]));
            }
            else if (std::isinf(v_expected[i])) {
                EXPECT_TRUE(std::isinf(v[i]));
            }
            else {
                EXPECT_EQ(v[i], v_expected[i]);
            }
        }
    }
}


TEST(Utils_test, linspace)
{
    const auto x = linspace<scalar>(0,1,11);

    const std::vector<scalar> x_computed = {0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};

    for (size_t i = 0; i < x.size(); ++i)
        EXPECT_DOUBLE_EQ(x[i], x_computed[i]);
}   


TEST(Utils_test, find_closest_point)
{

    // Define a polygon with its (x,y) coordinates
    const std::vector<scalar> x_poly = 
    {
        10.6770478032121900, -100.2900522471172735, -148.4813370229385328, -159.1087186506483704, -201.6686773285036907,
       -257.7283528064726852, -321.1350286159722600, -391.0933852974558249, -396.6733803059032653, -400.3477115513524041,
       -404.1952399870497175, -411.2739804433367681, -417.5060423551476561, -429.2419191355002113, -438.1206223640765529,
       -491.3095531760482118, -509.6808736296079587, -513.7960925402876455, -519.0661849858588539, -524.6408227096253540,
       -531.4934688305365853, -535.7399696867796592, -546.7854902342078276, -557.2526594562223181, -568.4947917613026220,
       -573.8189953101973515, -584.5650583759706933, -593.9845287638017908, -599.4185085699427873, -603.5243906005634926,
       -609.6236952078179456, -617.0749974622740410, -621.5536705004924443, -627.3197942616825458, -630.9205718308221549,
       -630.9630339487921447, -635.0828146705171093, -639.7622861171839759, -644.0003420553402975, -648.6346745257906150,
       -652.2506897360144649, -656.6081415677617770, -661.3565944542933721, -667.1787632730265614, -673.2100532726035453,
       -692.2617676439404022, -725.2437735546263866, -735.8506151881010737, -749.1342118413012940, -758.9343910505413078,
       -769.7180794814485125, -778.7206707153818570, -791.5774148350756150, -802.4685120174544863, -811.3354810465825722,
       -821.6806628842023201, -829.6286474086809903, -836.8191328511456959, -843.9833748658129480, -850.1136624098871835,
       -856.5138557527970988, -862.5529399675724562, -869.7658100651169661, -875.7417251128936186, -879.2595685299893375,
       -883.2496310766728129, -886.9902877563727088, -889.8109993735852186, -892.5324476331879850, -895.2152066493581515,
       -898.4903132256004028, -901.5320165405864827, -904.6250583047512919, -907.4885943630943075, -910.7061559601861518,
       -912.7899630866886582, -913.6781429468537681, -914.4508911787124816, -914.9989017886109650, -914.7570979273004923,
       -913.9923351313918829, -912.7738458912062924, -912.8115236547018867, -910.8819161696301308, -909.1072339856473263,
       -906.5458777484891471, -903.4210079215117730, -898.3326782705553342, -894.2456170594086871, -889.9172390805906616,
       -884.8277431496244390, -876.7160010113439057, -870.1925169290916529, -865.7761251667398028, -861.6123398800264113,
       -829.9391453102289233, -773.8730499608791433, -767.9334969873598311, -761.2533886826131493, -756.4267669934197329,
       -751.2947471725638025, -747.3278389357437845, -741.9701831132406369, -737.0082735798787326, -731.6272924916411284,
       -724.8672391345025972, -718.7070682867779396, -710.9814302896265872, -703.6678834551712498, -697.8091713607136626,
       -692.8783728401176631, -688.1688825094315689, -683.9488193625875283, -680.3932972816401161, -674.8764449304726440,
       -669.5817802472447511, -665.9007662416552193, -661.9510826042969711, -657.5510640825086739, -654.7669337512343191,
       -651.2681802971346769, -647.5201459977834020, -644.5339079614786897, -641.3505681063979864, -638.6569945324154105,
       -636.5787933227256872, -635.2943489700846840, -634.3991527832113206, -633.7952845685067587, -633.8125343443534803,
       -634.1207931569952052, -635.2248673349968158, -636.9263402042270172, -639.0502205127559137, -642.4228452747920528,
       -645.5113843504514080, -647.7686216711590532, -655.3186587693926413, -678.4375876792764757, -686.1085332697257400,
       -692.6185012956557330, -720.0150900655426085, -728.7575019357318524, -738.2195158360118512, -740.8755867448635399,
       -742.9323157429171260, -744.6793902426725253, -746.4937510990130249, -747.9871813367062714, -748.7438848399615381,
       -749.3070200541988015, -749.8452795151970349, -749.8402007725089788, -749.4706729095487390, -748.7504775211564265,
       -747.7703373890835792, -746.7534741994168144, -745.3065479764773045, -743.5716842326510232, -741.1203068975883070,
       -737.9232982315006666, -735.2050997485639527, -732.4347899376880378, -729.8047387314145453, -726.2926757902023382,
       -722.9028622768237256, -718.6711550777836237, -713.5600266662077047, -709.4047559816972353, -704.1776652876287699,
       -697.6997935026593041, -679.3681001154182013, -664.8304057849163655, -584.7529470931331161, -574.5405512599973008,
       -570.0196816039679106, -558.4230894559877925, -549.7010568449913990, -536.1942497248528525, -526.3042583482747432,
       -515.1676967827952467, -507.0444026984041557, -500.6991784101119265, -490.3112958217097912, -457.3637710869079456,
       -453.4775777487666346, -449.3563491062086541, -447.1967191382427700, -445.9084306906152051, -445.3362473622546531,
       -445.4676486008684151, -446.3211975928861648, -447.4823145558184478, -449.3629868559946772, -451.8865926048601978,
       -454.6004946139873937, -456.9142911928647663, -459.6071407631097827, -462.1289717716572341, -465.3897858843556605,
       -468.3130562070000451, -472.2847541508090217, -484.1317981956817675, -492.1066699239599984, -497.3310824817162938,
       -505.7011381260526832, -511.3323223191837315, -515.7381014229322318, -519.3434995108691510, -521.9599403227621224,
       -525.7328315915074199, -529.9231663695245516, -532.4691392129461747, -548.8494370355037972, -576.6751696599239949,
       -580.7944003826996777, -586.3414018423063681, -591.0386357108945958, -593.6476986068882979, -595.4770033153181430,
       -596.1719516218290664, -596.5031374006939586, -596.3313454111048486, -595.9421454130497295, -595.0191526977869216,
       -593.5992931874643546, -591.4218945113534573, -589.0195900735561736, -586.3419615009333938, -582.9857281972945202,
       -579.9277668106078636, -576.7280087794642895, -573.4539799637568649, -570.7716134999063797, -567.7999213825096376,
       -563.4077181013708469, -558.9071879035327584, -555.8306617224297952, -549.1840461565006990, -543.1132906430575531,
       -536.3071439915220253, -522.3754484216042329, -508.5653351761866361, -477.9270277487521525, -448.9365493634832092,
       -431.7852466400072444, -415.6521196314715780, -376.0652445026498754, -329.7166910517262295, -215.0866935790108982,
       -115.8216568955394905, -111.0041122600378003, -108.7892064549669158, -106.5471985051699448, -104.7941186891403049,
       -103.5632948145794217, -102.8688397346704733, -102.5199215617321897, -102.6881737755611539, -103.2070602030726150,
       -104.3498939625860658, -105.8887404253182467, -107.7922046440653503, -109.2856287752802018, -110.8867527091060765,
       -112.5438780264521483, -116.8973134891712107, -128.0296844294352923, -190.0087953623442445, -200.8653531020972878,
       -206.4285824589896947, -209.4247832314576954, -212.6107489310088567, -216.4206357111106627, -220.0285817608237267,
       -222.9822519310691860, -226.1188051135686692, -228.7871251879842021, -230.8412243520724587, -233.1242891210131347,
       -235.7775377302605193, -240.5064918059215415, -243.7644865082984325, -249.5381019395717885, -254.3613931217405479,
       -259.0310308267362416, -264.2963659782835748, -270.1197556871047709, -274.3947017191094346, -278.7978389242489357,
       -284.3855020376213361, -289.2878106617135927, -294.8106942794693168, -300.9839096649957355, -308.3188605646428186,
       -314.0774715053848922, -323.1747529501735698, -329.7568489851837512, -335.5761671922809910, -340.2290266033960506,
       -344.5798333272687159, -347.1792180771881249, -349.6999793674040120, -351.7621869187569246, -353.2524972897954285,
       -354.0263362223340664, -354.4455088557442650, -354.6693309735856019, -354.5763530952390283, -354.0918136829859577,
       -353.3128003931778949, -352.1786779689427931, -351.4454533547395840, -349.7249933004495688, -347.3991371541051194,
       -344.8812492870783899, -342.3216675172443502, -341.3194373395526782, -337.3805018445418682, -332.9607618633599486,
       -326.1265412433131132, -287.9737048833630979, -239.4414584227197338, -226.1153536907513626, -218.1810682200011797,
       -211.4769044046115596, -207.5579874083923642, -203.4921890601399355, -198.8304896552872378, -195.3145866167906206,
       -191.4377031016920228, -188.6895603985758498, -185.3594009583175648, -182.2039132954087108, -179.1821345289936289,
       -174.0365117783076130, -167.7354015317396261, -161.8840346939396113, -137.4809142959711608, -135.2115497007616796,
       -124.7471658550202847, -120.3683780660503544, -106.3349506255763117, -101.6902588138473220,  -99.7110625749046449,
        -97.4738727141229901,  -95.8696289802319370,  -94.9797364297264721,  -94.1390947506588418,  -93.2423491332156118,
        -92.1425879159942269,  -91.2873040778213181,  -90.3303602550877258,  -89.2130294211092405,  -88.0688521596603096,
        -86.8526195038284641,  -84.7350853282259777,  -82.5150554438878316,  -77.8732181484519970,  -69.6674768091470469,
        -67.4140606705041137,  -65.0144090944086201,  -61.6392834163561929,  -58.9017078487668186,  -55.6302850136999041,
        -52.4444475396885537,  -48.4233772092266008,  -45.8073783807049040,    9.6818259468709584,   17.3055779174901545,
         24.1082001217291690,   29.4211007228586823,   34.5845963442698121,   38.7233205405937042,   43.7643051718187053,
         47.4707334586710203,   51.6780700178933330,   54.9594457745552063,   56.7169208978593815,   57.5675407680391800,
         56.7135559374582954,   55.0300974760029931,   53.4310702868970111,   50.4800620623573195,   48.2900935826764908,
         44.2246398522402160,   23.2402305671130307,   10.6770478032121900 
    };

    std::vector<scalar> y_poly =
    {
       -6.4547356860712171, -183.1801275284960866, -259.7775318576022983, -276.6449081599712372, -344.4638619348406792,
       -433.4531478164717555, -534.3996408218517900, -645.5211011869832873, -655.9065493624657393, -661.8486669156700373,
       -667.9823874039575458, -679.4452319042757154, -689.3873531455174088, -707.9780756477266550, -722.1531027946621180,
       -806.4793294323608279, -835.6765803787857294, -841.2435312131419778, -847.7201828034594655, -852.7076489096507430,
       -857.1857960540801287, -859.1688225977122784, -862.1988178072497249, -862.5051847323775291, -860.0766397947445512,
       -858.0032791197299957, -851.8047471279278398, -845.7250076634809375, -842.4297290956601501, -840.0333753060549498,
       -837.0258689383044839, -834.5567375486716628, -833.7494105640798807, -833.1834968747571111, -833.1562990946695209,
       -833.0947981225326657, -833.3030112450942397, -833.8761241519823670, -834.8139777639880776, -836.2890430828556418,
       -837.7009908407926559, -839.9720633402466774, -842.9145623445510864, -846.7727902848273516, -850.8269820371642709,
       -864.7632282581180334, -888.8437560843303800, -895.6975666293874383, -902.1505193151533604, -905.8692529108375311,
       -908.6728710206225514, -910.1579739721491933, -911.2068668613210320, -910.6833195788785815, -909.5994564145803452,
       -907.5340039609000087, -905.1171416314318776, -902.4423332680016756, -899.2763393502682447, -896.0566883916035295,
       -892.1094295736402273, -888.0608273772522807, -882.2359720515087247, -876.5457468451932073, -872.9016050901263952,
       -868.2202112488448620, -863.4065772648900747, -859.3944959389045835, -855.2159348670393229, -850.7729316512122750,
       -844.6214405735954642, -838.4129463387653232, -831.2810447448864579, -823.3628150848671794, -812.2901841122657061,
       -802.4571422217413783, -796.3610777864232659, -789.2965686246752739, -778.0133502315729856, -762.7112890919670463,
       -752.2663667621091008, -741.8577087316662073, -741.8488336978480220, -730.1927885506302118, -721.2879760302603245,
       -711.3367887642234564, -700.7953736772760749, -686.1382484510540962, -676.1557566039264202, -666.9439807124435902,
       -657.3765055369585752, -643.5529395369812846, -632.4495878126472235, -624.5646027354523540, -617.9027079194784164,
       -567.4543686658143997, -478.3403228688985109, -468.9633993366733193, -459.7466641021892428, -452.2725509004667401,
       -445.9998537488281727, -441.9215108687058091, -437.6447504721581936, -434.5119030158966780, -431.8809005627408624,
       -429.5209417138248682, -428.0574100697413087, -426.9803514452651143, -426.8860385632142425, -427.3765026330947876,
       -428.4476492488756776, -429.8193876100704074, -431.5022887922823429, -433.1602914538234472, -436.1739413430914283,
       -439.7753223646432161, -442.6769790239632130, -446.1939152134582400, -450.5504242992028594, -453.6437953803688288,
       -458.1855515222996473, -463.6927152685821056, -468.9417801983654499, -475.5311440834775567, -482.8777527222409844,
       -490.5150025002658367, -497.5106171751394868, -505.4587266147136688, -514.0448636952787638, -519.9929156582802534,
       -527.7179787652567029, -536.2276779143139720, -544.5132820261642337, -552.7064201934263110, -563.1325852954760194,
       -571.1630688486620784, -575.9332695808261633, -588.4568089209496975, -625.1782670505344868, -635.6462012203410268,
       -645.8679907433688641, -689.2959291944280267, -703.3828983400017023, -718.0952075831592083, -722.2357533294707537,
       -725.7915615290403366, -728.8710599346086383, -732.2237340351566672, -735.5073032928630710, -737.7546121440827847,
       -740.0875339778140187, -743.7110839392989874, -746.6250577168539166, -750.3086414868012071, -753.8137262780219316,
       -756.4037321638315916, -758.6230079028755426, -761.0657692067325115, -763.4955086885020137, -765.9530887100845575,
       -768.6197995189577341, -770.4478046931326389, -771.9273943509906530, -772.8792247483506799, -773.7258710116147995,
       -774.0990514503791928, -774.1309447763487697, -773.3977151922881603, -771.9388734772801399, -770.5134881054982543,
       -767.6347839673981071, -759.4969042669981718, -753.0044211754575372, -717.1687404997646809, -711.5944695696234703,
       -709.0249033281579614, -701.7867119563743472, -695.8131106458604336, -684.8907641395926476, -675.5705352453514934,
       -663.6632419796660542, -653.8238434521481395, -645.4086829982697964, -629.5522369602695107, -578.4780864324420691,
       -570.8603417566046119, -563.6515100374817848, -558.7788826664909720, -553.6500987494364381, -549.2386736953631043,
       -544.7803237121552229, -540.1051790090277791, -536.0439722584560513, -531.9536787280812860, -527.8247109204530716,
       -524.5267289290204644, -522.3645499246194959, -520.1732353549450636, -518.5070279249921441, -516.0294342124834657,
       -513.7729813978075981, -511.3835694370791316, -504.1826779497787356, -498.4931154297664762, -494.0353032490238547,
       -485.2167511163279414, -477.9420357979834080, -471.1565309381112456, -464.1210990780964494, -458.3582192230969667,
       -449.6577640753239393, -441.5223782127723098, -435.2867800313979387, -396.4096013940870762, -330.6697827195748687,
       -318.9205651534721255, -306.3039959976449609, -295.8244463941082358, -287.3373551191762090, -278.6636510398238897,
       -272.7209953283891082, -266.5188652789220214, -259.5170879587531090, -253.6456386577337980, -247.2256300225853920,
       -240.5186433056369424, -233.1513008270412683, -226.9964111736044288, -221.2207100130617619, -215.2052269028499722,
       -210.4278041971847415, -205.8833863390609622, -201.8139667613431811, -198.7458274131640792, -195.7339706812053919,
       -191.5799134550616145, -187.3766950387507677, -184.4734357679262757, -179.9274700116366148, -176.2551808310672641,
       -172.6154384929686785, -165.3895277148112655, -158.3254250856116414, -142.4524488151073456, -127.5909760324284434,
       -118.8004223993048072, -111.6207917015999556,  -91.4792140768840909,  -67.9487476199865341,   -9.3439718969166279,
         45.2390001732856035,   47.9441487193107605,   49.7352319275960326,   51.7302226489409804,   53.7097308197990060,
         55.9365312773734331,   58.0668582897633314,   60.5883645750582218,   62.8804101077839732,   64.7648259717971087,
         67.0315887834876776,   69.0926193697378039,   70.6202851729467511,   71.5919519783928990,   72.1451335093006492,
         72.7939382595941424,   74.3904251158237457,   76.8333381153643131,   90.7439480125904083,   92.6077404767274857,
         93.7313978886231780,   93.9160486403852701,   93.9186875391751528,   93.2976347962394357,   92.2156090158969164,
         90.9031166732311249,   89.0323051055893302,   86.9574997350573540,   85.2003789562731981,   83.2506788820028305,
         81.0752761997282505,   77.6068442771211267,   75.1272888584062457,   70.4192897770553827,   66.7528490880504251,
         63.7320347344502807,   60.8055951520800591,   58.3665057299658656,   57.0309645039960742,   55.9634123146533966,
         55.1365281259641051,   54.9151842510327697,   55.0171500071883202,   55.6116941878572106,   57.2089978493750095,
         59.0318141123279929,   63.4211103813722730,   67.8115850361064076,   72.8239939138293266,   77.8144569359719753,
         83.7384616062045097,   88.2451809868216515,   93.4258926752954721,   99.1505669634789228,  104.8292840877547860,
        109.2727225814014673,  112.8979339785873890,  117.9906878946349025,  122.8345268070697784,  127.2988359872251749,
        131.9694371242076159,  136.2741915024816990,  138.5923763774335384,  143.2377991536632180,  148.3105395128950477,
        152.7151154372841120,  157.1524894209578633,  158.7490216754376888,  162.8613905664533377,  166.7531338250264525,
        172.5521681746467948,  204.0050674667581916,  244.1685833036899567,  254.0103059895336628,  260.2774855494499207,
        264.5689739705994725,  266.2085628090426326,  267.2901371102780104,  267.6630651289597154,  267.2640217905864120,
        266.0052759246900678,  264.4211367228999734,  262.4506160346791148,  260.8820819584652781,  258.7752904053777456,
        254.8973263548687100,  250.3079666486009955,  245.8333620456978679,  227.4167590951547027,  225.5928952563554049,
        217.6872151223942637,  213.1815657643601298,  202.6854390222579241,  199.2052486361935735,  198.2294806251302361,
        196.7850438002496958,  195.6362341763451695,  195.1312082046642900,  194.8159139305353165,  194.7486036159098148,
        194.8167224936187267,  195.2210062043741345,  195.7900539962574840,  196.8834205204620957,  198.0923626637086272,
        199.2657753415405750,  200.7854167539626360,  202.8303385581821203,  207.8426359277218580,  216.6578812506049871,
        218.8338225623592734,  220.6161090154200792,  221.5482229320332408,  221.4780142996460199,  221.1284220982342958,
        220.5682758213952184,  218.0119129633530974,  216.3626197045668960,  181.0370758613571525,  175.0333470692858100,
        169.3462067535147071,  164.6591079225763679,  158.9512541536241770,  153.7192224022001028,  146.0467641307041049,
        139.0745720956474543,  129.3201921824365854,  119.0166084943339229,  109.5268946243450046,   96.8552141375839710,
         83.0041250791400671,   73.5506956642493606,   67.4284177394583821,   58.3952807513996959,   52.3209492731839418,
         45.0144265173003078,   11.8227492906153202,   -6.4547356860712171 
    };


    // Define a series of (x,y) points to which compute their closest points
    std::vector<scalar> x_targets = 
    {
          0.0000000000000000,   -9.8259652535811934,  -19.6519305071623869,  -29.4778957607435821,  -39.3038610143247737,
        -49.1298262679059690,  -58.9557915214871642,  -68.7817567750683594,  -78.6077220286495475,  -88.4336872822307498,
        -98.2596525358119379, -108.0856177893931260, -117.9129934303614959, -127.7404322087886612, -137.5678709872158265,
       -147.3953097656430202, -157.2227485440701855, -167.0501873224973224, -176.8776261009245445, -186.7050648793516814,
       -196.5325036577789035, -206.3599424362060404, -216.1873812146332341, -226.0148199930603994, -235.8401102022039026,
       -245.6588991233033141, -255.4776880444027256, -265.2964769655021087, -275.1152658866014917, -284.9340548077008748,
       -294.7528437288003147, -304.5716326498996978, -314.3904215709990808, -324.2092104920984639, -334.0279994131978469,
       -343.8467883342973437, -353.6655772553967267, -363.4843661764961098, -373.3300113096001382, -383.1784858010622656,
       -393.0269602925245636, -402.8754347839866909, -412.7239092754488752, -422.5705136698522324, -432.3791973984893957,
       -442.1878811271265022, -451.9965648557636086, -461.8052485844007151, -471.6139323130378784, -481.4182762415662182,
       -491.1997475777970408, -500.9812189140280339, -510.7626902502589701, -520.5441615864898495, -532.2437336117327504,
       -548.8381450407648572, -566.9571360386216838, -583.2100172266709706, -598.7363322286396397, -615.9111954801193178,
       -634.1910924070732563, -652.2051445437489292, -668.4598594457237368, -683.4704743743488962, -698.3086686549496562,
       -713.2400019525757671, -728.2712567944687407, -743.7360433836247466, -760.5879916876675679, -778.4919159287276216,
       -796.8863793734540195, -815.1717755497304552, -832.7625893413094218, -849.0992407176661345, -863.7064146477368922,
       -876.0561335643126313, -885.9825555017806664, -893.7370846315945982, -899.1853744655149967, -902.2889534978462507,
       -902.8145026248254226, -901.6987616883477585, -899.1432708670597549, -895.0705645994029283, -889.5913093084976708,
       -882.8136966269784125, -874.8456942919909807, -865.6488477858958959, -855.8357652271890856, -845.9401820174525710,
       -836.1587531331622358, -826.3773242488719006, -816.5958953645815654, -806.8144664802912303, -797.0330375960008951,
       -787.2516087117104462, -777.4701798274201110, -767.6887509431297758, -757.9848447243123246, -748.0024513569298961,
       -735.3764316233298359, -718.8368869760578264, -700.5219665082412348, -683.2092458785997451, -668.6047161708431759,
       -657.2891584517312822, -649.9861499635048858, -646.5514215866586483, -646.3682887284875278, -649.4522624179600143,
       -655.5417131709266414, -663.9428271344291943, -673.3075748784082180, -683.1671053969535023, -693.0518909884849563,
       -703.7295151015123338, -713.5108890418814553, -723.3323880036371065, -733.1237301285693775, -742.8809359307100522,
       -752.6381417328508405, -760.3678276966484191, -761.8065967051729785, -755.3273484729523943, -741.8152384466168314,
       -724.4267494648977390, -706.1698508686347395, -689.2013328444627405, -672.3494381867277525, -655.4975435289929919,
       -638.6456488712580040, -621.8181790343721786, -605.0821144161941447, -588.3685956446237242, -571.8627870932846236,
       -555.9206981744015366, -540.9230412771728425, -526.6035887819315349, -513.3658534747540898, -501.4975903398961350,
       -490.1472437329204013, -480.0551510765615717, -469.9958545745477068, -459.7393855736848991, -449.8443517675528938,
       -440.5067415478147836, -433.6189314206042695, -434.0607971662016098, -441.5002268841121804, -454.5134879017600724,
       -469.8998499615447599, -485.1600420927788946, -497.9638876833593599, -507.9584452713451128, -515.6576145054118570,
       -522.9895985419072986, -530.2320310728651975, -537.4408002194423943, -544.6455115229803141, -551.8291371551564453,
       -559.0127627873326901, -566.1882102510429604, -573.1719967392309627, -579.8660006703677254, -583.4511480148312330,
       -583.1330409172361442, -578.5525140491918137, -570.1720453317276451, -559.0558687776202760, -544.6477820148452338,
       -528.7927877805917660, -512.3777639280609719, -495.9627400755301778, -479.5477162229992700, -463.1326923704681349,
       -446.7176685179376818, -430.3026446654070014, -413.8876208128761505, -397.4725969603452995, -381.0575731078141075,
       -364.6425492552837113, -348.2275254027529172, -331.7906504828786183, -315.0853913253457108, -298.5620871741714950,
       -282.1145471115215173, -265.6670070488715396, -249.2194669862216188, -232.7719269235716411, -216.3307507708303774,
       -199.9910786298282801, -183.6425696396225931, -167.2659364761897791, -150.8893033127569936, -134.4552324840708764,
       -118.0151046038922118, -101.7381531214274304,  -86.8100590951374187,  -81.7702869601893383,  -90.0312611112345991,
       -107.0773728759962040, -125.1359151613652898, -143.1455552410105838, -161.2031315459110203, -179.2621744709378788,
       -197.3423979553813297, -215.7040037524754439, -232.8205803804392531, -247.3756125993758417, -261.9460494878295549,
       -278.4696440750771558, -296.7013013556286296, -314.3475141390359795, -328.8248244287292437, -338.4974201087460983,
       -342.0467172207069098, -339.1005273243698639, -329.8553822522385417, -316.3406414268027333, -302.1653336903370359,
       -287.9400912304045050, -273.7148487704716899, -259.4896063105384769, -245.2643638506059460, -231.0391213906731309,
       -216.4235447497310361, -199.7540105393104000, -183.4498499145835524, -168.5233987852022892, -153.7431574963556216,
       -139.0213805811939096, -125.0579552702446477, -110.3045984607806815,  -93.6194280526302549,  -77.9098507027558469,
        -64.9712212338194348,  -49.6362807450052870,  -33.9046249921711578,  -18.4195244461912147,   -2.9384397301469631,
         12.3285515331595779,   25.5115317286631509,   35.3786102731476149,   41.8943619487668357,   44.4288483462901382,
         43.1385921000196362,   37.7055002441146030,   29.4198321547306314,   19.7649260517638936,    9.8649230022602854 
    };

    std::vector<scalar> y_targets = 
    {
          0.0000000000000000,  -15.6136475843265039,  -31.2272951686530078,  -46.8409427529795082,  -62.4545903373060156,
        -78.0682379216325160,  -93.6818855059590163, -109.2955330902855167, -124.9091806746120312, -140.5228282589385458,
       -156.1364758432650319, -171.7501234275915181, -187.3628833354076164, -202.9756035054611232, -218.5883236755146015,
       -234.2010438455681083, -249.8137640156216435, -265.4264841856751218, -281.0392043557286570, -296.6519245257821353,
       -312.2646446958356705, -327.8773648658891489, -343.4900850359426272, -359.1028052059961624, -374.7168769639375796,
       -390.3350384490492502, -405.9531999341609776, -421.5713614192725345, -437.1895229043842619, -452.8076843894959893,
       -468.4258458746076030, -484.0440073597193305, -499.6621688448310010, -515.2803303299426716, -530.8984918150542853,
       -546.5166533001660127, -562.1348147852777402, -577.7529762703894676, -593.3542182023633131, -608.9536776238674065,
       -624.5531370453713862, -640.1525964668753659, -655.7520558883792319, -671.3526926359774052, -686.9772024703273701,
       -702.6017123046774486, -718.2262221390274135, -733.8507319733773784, -749.4752418077273433, -765.1024707992097547,
       -780.7440309052419707, -796.3855910112745278, -812.0271511173068575, -827.6687112233391872, -841.8037348434697833,
       -849.3095493210045106, -847.2732105846491777, -838.6004576127925247, -828.6458592279218465, -822.0837250180258025,
       -820.3840489708101131, -824.0896383246808909, -832.6928762401009863, -843.4140219651442294, -854.3758587452471147,
       -865.2095383061164284, -875.9049319966941312, -885.9396006701518900, -893.3837433203377714, -897.7017475020068105,
       -898.7678117576906516, -896.5264982092530772, -891.0622968928894352, -882.5392452931155276, -871.3149184622250232,
       -857.6534757190357823, -842.1245171295381624, -825.3984518520117035, -807.7938966629251354, -789.6287603293651500,
       -771.1973935106611862, -752.7884009331851303, -734.5247703444844092, -716.5417164352124928, -698.9261137200440999,
       -681.7734701411166043, -665.1518732923527750, -649.1651421532366157, -633.5451418722453809, -617.9756729968225955,
       -602.3340863434905259, -586.6924996901582290, -571.0509130368259321, -555.4093263834937488, -539.7677397301615656,
       -524.1261530768292687, -508.4845664234970855, -492.8429797701649022, -477.1535102422151340, -461.6602003723587586,
       -448.3564544816306352, -440.4582157281674881, -439.4972118715035094, -445.5113999943756653, -456.6565228617912453,
       -471.1554968969618358, -488.0303923998348523, -506.1264800628084117, -524.5449922852054669, -542.6915743262231899,
       -560.0891127434209693, -576.5023916911979995, -592.3860671161193068, -607.9785349304515876, -623.5550107148382040,
       -638.5941445566752463, -654.2357655689223748, -669.8522197266661351, -685.4875541952535514, -701.1442626292380282,
       -716.8009710632223914, -733.4318624890565843, -751.6442706836301113, -768.7297536444604020, -781.0534106218105990,
       -786.5719410816409436, -784.8071088079537958, -777.6589014484592326, -770.1522889969777452, -762.6456765454962579,
       -755.1390640940147705, -747.5782397922503151, -739.8172402702296040, -732.0073827603586096, -723.7690744378354566,
       -714.5212180002222340, -703.8031969008844726, -692.1751544057935916, -679.3409046466227892, -665.2395716696905765,
       -650.7113570430117306, -635.2683893920848277, -619.8043125343964448, -604.4700232555783259, -588.9000884776727389,
       -573.0094403421703646, -556.0036341647038398, -537.6894121312025163, -520.9787785807292266, -508.0917691720443372,
       -497.9372552447446196, -487.6191134240867768, -474.3930513059007694, -458.9391012987993577, -442.1781840999386759,
       -425.2497934425503558, -408.2827328123853476, -391.3012949626774457, -374.3181380663035611, -357.3260485294376281,
       -340.3339589925716950, -323.3384744170884915, -306.2634687478898741, -289.0822099898202850, -271.0313165247616780,
       -252.6334528628738383, -234.8668947681638315, -218.4992755425344626, -203.8261148290617939, -192.3321818651218962,
       -182.9539964853373419, -174.5348174295757246, -166.1156383738140789, -157.6964593180524048, -149.2772802622906170,
       -140.8581012065291418, -132.4389221507675245, -124.0197430950058930, -115.6005640392442615, -107.1813849834823884,
        -98.7622059277209843,  -90.3430268719593386,  -81.9683931119753737,  -74.1408838956413092,  -65.9406179211262895,
        -57.5851400808317351,  -49.2296622405371807,  -40.8741844002426262,  -32.5187065599480789,  -24.1508968573342280,
        -15.5863946314781572,   -7.0388408811233791,    1.4547726185883683,    9.9483861183001192,   18.3301933886015931,
         26.7001597996888371,   35.3825723521484150,   46.0997879913633781,   63.0637754571069564,   79.1300018672749417,
         85.5434755519339944,   89.3089208901061511,   93.3065274341638116,   97.0827056668251061,  100.8517724597620884,
        104.5146933223660000,  105.7589923098962572,   99.8076348488291956,   88.4856451499411918,   77.1919170524707567,
         69.3091370773890532,   67.9760438901733437,   72.9644056615649106,   84.1898684523935970,   99.7381916597437339,
        117.7127347202482497,  135.8204184234052434,  151.6747667721489563,  164.1589549816886802,  175.9650238789471928,
        187.7114301808017558,  199.4578364826565746,  211.2042427845116777,  222.9506490863661838,  234.6970553882210311,
        245.9380881167625148,  252.6590490043965360,  244.7668006875821334,  233.9318706888385577,  222.8919408206012918,
        211.7742369400901907,  199.8020641656451915,  188.7265597013390277,  181.6369304761180388,  189.7704316122608645,
        202.9142601043769218,  203.2297118290132971,  193.5966086395759760,  183.5692837154988126,  173.5357669280003847,
        163.1809723264891545,  150.3041782294016855,  134.7688765813911687,  117.5486016255599111,   99.3014820250911185,
         80.9393229183707348,   63.3436851356580490,   46.8729297133537059,   31.1558577071296341,   15.5890627752796931 
    };

    // Solutions (computed with matlab)
    std::vector<scalar> x_closest = 
    {
         10.5647051899873752,    0.7545529559377080,   -9.0555992781119592,  -18.8657515121616193,  -28.6759037462112900,
        -38.4860559802609643,  -48.2962082143106244,  -58.1063604483602987,  -67.9165126824099445,  -77.7266649164596402,
        -87.5368171505092931,  -97.3469693845589461, -107.1728911864901477, -116.9969698080127500, -126.8210484295353524,
       -136.6451270510579832, -146.4692056725805855, -156.3057194134549093, -166.1077766237824278, -175.9139529170374487,
       -185.7201292102925549, -195.5263055035475759, -205.3543276715033699, -215.1874562390104586, -225.0205839386150615,
       -234.8537090120609889, -244.6868340855069732, -254.5199591589528723, -264.3303118794918305, -274.1428737442894317,
       -283.9554356090869760, -293.7679974738846340, -303.5805593386821783, -313.3931212034797795, -323.2161447890277941,
       -333.0448763448641216, -342.8736079007003923, -352.7023394565367198, -362.5310657012530555, -372.3597913864319366,
       -382.1885170716107609, -391.4944179230352006, -401.0979644996219804, -410.7748448502730412, -420.6562689971075883,
       -430.4711788755660109, -440.2979896183629194, -450.1399431428670255, -459.9818966673711884, -469.8238419884138466,
       -479.6657440737257048, -489.5076461590377903, -499.3275933608148307, -509.1523468561579193, -523.4452769541319412,
       -548.4594508467837386, -571.4890002509018814, -589.6247772751079310, -604.1896526666007503, -618.1254513532635428,
       -633.5421053183728191, -648.3509320979746917, -661.5855988657505122, -676.3615857560015456, -691.2511306285524597,
       -706.1581969269998353, -721.0565360065794493, -738.3952797487969519, -756.2384706747744758, -776.4975847557000179,
       -797.4707202885113020, -817.5347267618636806, -837.6327244933011116, -855.4182832453494711, -872.0417952810656743,
       -885.6608932126915761, -896.7636886641583942, -905.2471204140014152, -911.1228947649063912, -914.2711873213095259,
       -914.8881808792558559, -913.8864247855614167, -911.2668070096133306, -907.0893333272313157, -901.3544117395958892,
       -894.5742498802276259, -885.8499383879653806, -876.3272777281878234, -867.2312264990620179, -857.2142032071463973,
       -847.4048763112124334, -837.5955494152783558, -827.7763540956296993, -817.9523167115002025, -808.1282793273705920,
       -798.3042419432409815, -788.4802045591114847, -778.6561671749819880, -768.7871524969492611, -758.2257064114062359,
       -743.1654443490805306, -721.6187211794352834, -699.4954592829615194, -677.3657317052492317, -660.0799136276092440,
       -646.7013299738804335, -638.1325974018707257, -634.4771127217695721, -634.0138512323683244, -637.2725623599405935,
       -643.0936240099275665, -652.3317620755311737, -662.1964766494761534, -672.0252878310463984, -682.7696447050290089,
       -692.5289896346290561, -702.3421804188359374, -712.1852589549725963, -721.9537103645367324, -731.8715136052836669,
       -741.4688583138789681, -748.6202559690841554, -749.4706729095487390, -745.0658298355708666, -735.2050997485639527,
       -723.0518189587783127, -710.5468825951695635, -694.3177702293850189, -677.4838968388403373, -660.6494399659336523,
       -643.8105294633213589, -626.9717558707825447, -610.1345021585258337, -593.2978160496661530, -577.5973670311029764,
       -562.3422859398009450, -548.3002703788591816, -534.7505094300285009, -522.1482858157382907, -510.4007413050439936,
       -499.9611210019972418, -489.9013193886939348, -479.9010173183099823, -469.9018965128042282, -459.9016430139241152,
       -451.2085224154642447, -445.9084306906152051, -446.3211975928861648, -451.8865926048601978, -461.6180342354212485,
       -476.5113194452676453, -493.4560340423385014, -508.0412260782376279, -519.0786994713414515, -526.6650724078194798,
       -534.6313857406485113, -541.7943089820976184, -548.9497182148289767, -556.1406567580975207, -563.3315980638083147,
       -570.5225393695191087, -577.8162114084123004, -584.2230423150733714, -591.9676463042384285, -596.2257525008851644,
       -595.5401787512295186, -590.3016370747916426, -580.7573120639671060, -567.2242199938314116, -551.8737784053539599,
       -534.6112723508446152, -518.1589701701996091, -501.8114311508193737, -485.4311470997187712, -468.9820091069025239,
       -452.5652405134027276, -436.1470056512849283, -418.7849978168264897, -402.8194874849799021, -386.3772599687381444,
       -369.9231131583702563, -353.4735704843665758, -337.0246351773217270, -320.6269831936263017, -304.2039129218500193,
       -287.7779979566162183, -271.3520829913824173, -254.9261680261486163, -238.5002530609147868, -222.0743850482186872,
       -206.1313329755413974, -189.9694493959937063, -173.8087452233014858, -157.6480410506093222, -141.4904399765215715,
       -125.3331874198011349, -111.0041122600378003, -103.8074572116319558, -102.5894481664629012, -105.0246669051843753,
       -112.1322282343616479, -127.8807572227897964, -145.9405696932696799, -163.9390281807087035, -181.9373634038947785,
       -199.4288529629677384, -213.7437980643141202, -226.1188051135686692, -239.7848193713148532, -254.9476275755119445,
       -275.4318045571076823, -297.9205303972496495, -319.7493976404093701, -338.1055885305967763, -350.4259430247788600,
       -354.6328048138313989, -350.8592029141071293, -339.3680892320694511, -324.4198477793154893, -310.1856140228738354,
       -295.9509341260537099, -281.7442702076371575, -267.5317419196495621, -253.3192136316626488, -238.5308140910400425,
       -224.0735786387704138, -200.9408008768871809, -175.1707976074143005, -160.3915765674028080, -145.6663692726663442,
       -130.9906853365142467, -116.9584652676473411, -102.1788073406916624,  -93.2423491332156118,  -85.4477065467080195,
        -74.3415116694819460,  -42.5825731348922503,  -27.0239638007565830,  -11.4622132674490516,    4.0994846323353844,
         20.2084697504814557,   35.2998340789945999,   46.5910187020770152,   54.1808334296333101,   57.3451263235300459,
         55.9399004322542197,   50.7088652478752309,   40.8364062436466284,   30.9802245745906504,   20.7067100752212028 
    };

    std::vector<scalar> y_closest = 
    {
         -6.6336517101337797,  -22.2572283991699038,  -37.8808050882060314,  -53.5043817772421519,  -69.1279584662782867,
        -84.7515351553144143, -100.3751118443505419, -115.9986885333866837, -131.6222652224227829, -147.2458419114589390,
       -162.8694186004950382, -178.4929952895311658, -194.1200225660273020, -209.7348567800186743, -225.3496909940100466,
       -240.9645252080014188, -256.5793594219928195, -272.1960942785049724, -287.7978510643681034, -303.4239145616176074,
       -319.0499780588672252, -334.6760415561167861, -350.3144736131374088, -365.9236094446247876, -381.5327438984013497,
       -397.1418741834063439, -412.7510044684113382, -428.3601347534162187, -443.9637858033709676, -459.5858586372420405,
       -475.2079314711129996, -490.8300043049840156, -506.4520771388550315, -522.0741499727259907, -537.7052740486630000,
       -553.3171759833244323, -568.9290779179857509, -584.5409798526470695, -600.1528733511553355, -615.7647659608974209,
       -631.3766585706393926, -646.2675003402670200, -663.0447183437773901, -678.6369647099639906, -694.3776057202367156,
       -709.9406133897232394, -725.6051211329802300, -741.2086459791354400, -756.8121708252906501, -772.4156826656017074,
       -788.0191259595820839, -803.6225692535628014, -819.2222747184623586, -834.8366010819607936, -851.6380289218794815,
       -862.2478134960344960, -858.9106298783095781, -848.5389825569352524, -839.7053412056674233, -834.3673824059701474,
       -833.2251440169968646, -836.1987304828357992, -843.0663187168306649, -853.1323143451085116, -864.0239516758674654,
       -874.9091651954249755, -885.7866075723886752, -896.9337228030514098, -904.8462706307582266, -909.7912449455355954,
       -910.9235690444820648, -908.3617548956923429, -902.0827940194238863, -892.7851135739574602, -880.0687945830453600,
       -865.1172979488478632, -847.8644848339416740, -829.5609229990863014, -810.3236824758597550, -790.9394317134344874,
       -771.0066047015258164, -751.3616525182090982, -732.5177717621398870, -713.4481812196657984, -694.8424655309494256,
       -676.9584297925678129, -659.2980764940787139, -642.8913097572656170, -627.1625272196373544, -610.8974565082737627,
       -595.2733851817882851, -579.6493138553026938, -564.0167282496943244, -548.4019487308976295, -532.7871692121009346,
       -517.1723896933040123, -501.5576101745072606, -485.9428306557105657, -470.3110870283178997, -455.0582419529010849,
       -438.5988703496422545, -428.7491597387566458, -427.2353344678049325, -434.8141371765771055, -448.0465811982801370,
       -465.1319905114667108, -484.8048769343606068, -504.7665497124332887, -525.0379803916678156, -545.8488779855681514,
       -564.8766712430312964, -583.5023275371150930, -599.3813418995697475, -614.9931498546225157, -631.0898834517621481,
       -645.7274417644449613, -661.2815643829990222, -676.8844050295739407, -692.4196992412311147, -708.2248171061421544,
       -723.2614401903421140, -737.3874508258202241, -750.3086414868012071, -761.4029036779668331, -770.4478046931326389,
       -774.0826529907857321, -772.3398538403080238, -766.1334224750105477, -758.6554257191558008, -751.1333858247762691,
       -743.5977593256786804, -736.0621940955794571, -728.5273090312265367, -720.9926779766090021, -713.2629829694257069,
       -704.2329387281248501, -694.6803577288832230, -683.5301977347047568, -671.1269389469715634, -657.8892327881663959,
       -644.2820850255719733, -628.9167052102744719, -613.4145715180571869, -597.9142689831328425, -582.4122105848357478,
       -566.8913219623030955, -553.6500987494364381, -540.1051790090277791, -527.8247109204530716, -518.8446111794737590,
       -508.8145709650460731, -497.3417492739229147, -482.1936793985179293, -464.6378194482712729, -447.8478517033326511,
       -430.1548803903775706, -413.1543197510178516, -396.1726816107237710, -379.1836951098197801, -362.1947020824947003,
       -345.2057090551696206, -327.4152071307712504, -311.1221720278592215, -292.8024427033595884, -271.7134639971076240,
       -250.8497017047614577, -230.2811146853537423, -211.7237945082557928, -195.1894839257746241, -181.7671176602163143,
       -171.7358458328188249, -163.2327289563656336, -154.8263885092006547, -146.3401540570185944, -137.8669380374047932,
       -129.4511624717346479, -121.0359538421097767, -113.0149980684030737, -105.0916212210584320,  -96.7259090812662095,
        -88.3609459798341135,  -80.0097595176332135,  -71.6588814065411839,  -63.3016194497275393,  -54.9052976213967412,
        -46.5075214388326970,  -38.1097452562686385,  -29.7119690737046156,  -21.3141928911405714,  -12.9164407131390533,
         -4.4196781674291179,    4.4672740717292285,   13.3535777891763701,   22.2398815066234938,   31.1244789199164558,
         40.0088846935912699,   47.9441487193107605,   55.4947938779644332,   61.5355030414835511,   67.9353356530746026,
         72.6327673826725544,   76.8006571877297830,   80.8532624748614381,   84.8928417944357676,   88.9323934485449001,
         92.3611302529142790,   93.7339882783479368,   89.0323051055893302,   78.1361519569605747,   66.3736107906910746,
         56.7795161948254687,   55.3166592339350842,   61.7684299215507693,   75.5369457872792367,   95.4411629039409632,
        117.1595870860079458,  140.1753141170792958,  160.7862886636685289,  173.9591528910431748,  185.6937436464424707,
        197.4287021964734095,  209.1603202419732099,  220.9220899230930399,  232.6838596042123015,  244.8411210900940205,
        255.6230751442225255,  267.4942438227524235,  255.7521732570616564,  244.7070303189147751,  233.5941770571581344,
        222.4040975168539660,  210.6311640849864091,  199.5713099283456415,  194.7486036159098148,  200.2740064884504534,
        211.6366696089216930,  214.3096438063315929,  204.4047200858945814,  194.4977966148680650,  184.5909066514012409,
        172.6064662753707921,  158.0470753873220815,  140.7294105936170183,  121.4614663988897405,  100.1685211449367188,
         78.6596771005627460,   59.0956551186754382,   39.6551545560565870,   24.0653327887724409,    8.1368693986394156 
    };

    std::vector<sVector3d> r_polygon(x_poly.size());
    for (size_t i = 0; i < x_poly.size(); ++i)
        r_polygon[i] = sVector3d(x_poly[i],y_poly[i],0.0);

    std::vector<sVector3d> r_targets(x_targets.size());
    for (size_t i = 0; i < x_targets.size(); ++i)
        r_targets[i] = sVector3d(x_targets[i], y_targets[i], 0.0);

    std::vector<sVector3d> r_closest(x_closest.size());
    for (size_t i = 0; i < x_closest.size(); ++i)
        r_closest[i] = sVector3d(x_closest[i], y_closest[i], 0.0);

    std::vector<sVector3d> r_closest_computed(x_closest.size());

    for (size_t i = 0; i < x_closest.size(); ++i)
    {
        r_closest_computed[i] = std::get<0>(find_closest_point(r_polygon, r_targets[i], true, 0, 1.0e18));
        EXPECT_DOUBLE_EQ(r_closest_computed[i][0], r_closest[i][0]);
        EXPECT_DOUBLE_EQ(r_closest_computed[i][1], r_closest[i][1]);
        EXPECT_DOUBLE_EQ(r_closest_computed[i][2], r_closest[i][2]);
    }
}


TEST(Utils_test, nchoosek_test)
{
    // for invalid inputs (negative, or n < k),
    // the result is 0
    constexpr auto sweep = 100;
    for (auto n = -sweep; n <= sweep; ++n) {
        for (auto k = -sweep; k <= sweep; ++k) {
            if ((k >= 0 && n > 0)  || (n == 0 && k == 0)) {
                continue;
            }
            EXPECT_EQ(nchoosek(n, k), 0);
        }
    }

    // nchoosek(n, 0) == 1 for all n >= 0
    for (auto n = 0; n <= sweep; ++n) {
        EXPECT_EQ(nchoosek(n, 0), 1);
    }

    // nchoosek(n, n) == 1 for all n >= 0
    for (auto n = 0; n <= sweep; ++n) {
        EXPECT_EQ(nchoosek(n, n), 1);
    }

    // nchoosek(n, 1) == n for all n > 0
    for (auto n = 1; n <= sweep; ++n) {
        EXPECT_EQ(nchoosek(n, 1), n);
    }

    // some legitimate inputs (hardcoded with Matlab)
    // num_tests = 200;
    // for t = 1:num_tests
    //     n = randi(50);
    //     k = randi(50);
    //     if k >= n || k == 1 || k == 0
    //         continue
    //     end
    //     fprintf('EXPECT_EQ(nchoosek(%dull, %dull), %dull);\n', ...
    //         n, k, nchoosek(n, k));
    // end
    EXPECT_EQ(nchoosek(46ull, 20ull), 5608233007146ull);
    EXPECT_EQ(nchoosek(36ull, 33ull), 7140ull);
    EXPECT_EQ(nchoosek(37ull, 19ull), 17672631900ull);
    EXPECT_EQ(nchoosek(30ull, 6ull), 593775ull);
    EXPECT_EQ(nchoosek(49ull, 10ull), 8217822536ull);
    EXPECT_EQ(nchoosek(47ull, 20ull), 9762479679106ull);
    EXPECT_EQ(nchoosek(14ull, 8ull), 3003ull);
    EXPECT_EQ(nchoosek(20ull, 19ull), 20ull);
    EXPECT_EQ(nchoosek(40ull, 12ull), 5586853480ull);
    EXPECT_EQ(nchoosek(33ull, 12ull), 354817320ull);
    EXPECT_EQ(nchoosek(43ull, 26ull), 421171648758ull);
    EXPECT_EQ(nchoosek(32ull, 31ull), 32ull);
    EXPECT_EQ(nchoosek(9ull, 5ull), 126ull);
    EXPECT_EQ(nchoosek(46ull, 35ull), 13340783196ull);
    EXPECT_EQ(nchoosek(37ull, 12ull), 1852482996ull);
    EXPECT_EQ(nchoosek(26ull, 4ull), 14950ull);
    EXPECT_EQ(nchoosek(37ull, 28ull), 124403620ull);
    EXPECT_EQ(nchoosek(43ull, 40ull), 12341ull);
    EXPECT_EQ(nchoosek(38ull, 6ull), 2760681ull);
    EXPECT_EQ(nchoosek(36ull, 16ull), 7307872110ull);
    EXPECT_EQ(nchoosek(46ull, 32ull), 239877544005ull);
    EXPECT_EQ(nchoosek(13ull, 5ull), 1287ull);
    EXPECT_EQ(nchoosek(42ull, 30ull), 11058116888ull);
    EXPECT_EQ(nchoosek(48ull, 4ull), 194580ull);
    EXPECT_EQ(nchoosek(30ull, 15ull), 155117520ull);
    EXPECT_EQ(nchoosek(42ull, 10ull), 1471442973ull);
    EXPECT_EQ(nchoosek(23ull, 20ull), 1771ull);
    EXPECT_EQ(nchoosek(42ull, 34ull), 118030185ull);
    EXPECT_EQ(nchoosek(29ull, 9ull), 10015005ull);
    EXPECT_EQ(nchoosek(46ull, 28ull), 2818953098830ull);
    EXPECT_EQ(nchoosek(41ull, 23ull), 202112640600ull);
    EXPECT_EQ(nchoosek(49ull, 4ull), 211876ull);
    EXPECT_EQ(nchoosek(30ull, 21ull), 14307150ull);
    EXPECT_EQ(nchoosek(16ull, 14ull), 120ull);
    EXPECT_EQ(nchoosek(41ull, 22ull), 244662670200ull);
    EXPECT_EQ(nchoosek(37ull, 25ull), 1852482996ull);
    EXPECT_EQ(nchoosek(41ull, 18ull), 202112640600ull);
    EXPECT_EQ(nchoosek(46ull, 10ull), 4076350421ull);
    EXPECT_EQ(nchoosek(39ull, 28ull), 1676056044ull);
    EXPECT_EQ(nchoosek(34ull, 21ull), 927983760ull);
    EXPECT_EQ(nchoosek(47ull, 24ull), 16123801841550ull);
    EXPECT_EQ(nchoosek(36ull, 28ull), 30260340ull);
    EXPECT_EQ(nchoosek(49ull, 27ull), 49699896548176ull);
    EXPECT_EQ(nchoosek(49ull, 6ull), 13983816ull);
    EXPECT_EQ(nchoosek(30ull, 27ull), 4060ull);
    EXPECT_EQ(nchoosek(46ull, 28ull), 2818953098830ull);
    EXPECT_EQ(nchoosek(41ull, 8ull), 95548245ull);
    EXPECT_EQ(nchoosek(24ull, 13ull), 2496144ull);
    EXPECT_EQ(nchoosek(24ull, 21ull), 2024ull);
    EXPECT_EQ(nchoosek(31ull, 19ull), 141120525ull);
    EXPECT_EQ(nchoosek(44ull, 40ull), 135751ull);
    EXPECT_EQ(nchoosek(45ull, 22ull), 4116715363800ull);
    EXPECT_EQ(nchoosek(46ull, 36ull), 4076350421ull);
    EXPECT_EQ(nchoosek(48ull, 28ull), 16735679449896ull);
    EXPECT_EQ(nchoosek(28ull, 16ull), 30421755ull);
    EXPECT_EQ(nchoosek(23ull, 7ull), 245157ull);
    EXPECT_EQ(nchoosek(25ull, 12ull), 5200300ull);
    EXPECT_EQ(nchoosek(39ull, 18ull), 62359143990ull);
    EXPECT_EQ(nchoosek(46ull, 9ull), 1101716330ull);
    EXPECT_EQ(nchoosek(36ull, 29ull), 8347680ull);
    EXPECT_EQ(nchoosek(20ull, 9ull), 167960ull);
    EXPECT_EQ(nchoosek(45ull, 28ull), 1103068603890ull);
    EXPECT_EQ(nchoosek(19ull, 11ull), 75582ull);
    EXPECT_EQ(nchoosek(43ull, 3ull), 12341ull);
    EXPECT_EQ(nchoosek(15ull, 7ull), 6435ull);
    EXPECT_EQ(nchoosek(41ull, 4ull), 101270ull);
    EXPECT_EQ(nchoosek(48ull, 25ull), 30957699535776ull);
    EXPECT_EQ(nchoosek(42ull, 8ull), 118030185ull);
    EXPECT_EQ(nchoosek(47ull, 42ull), 1533939ull);
    EXPECT_EQ(nchoosek(45ull, 30ull), 344867425584ull);
    EXPECT_EQ(nchoosek(21ull, 2ull), 210ull);
    EXPECT_EQ(nchoosek(38ull, 8ull), 48903492ull);
    EXPECT_EQ(nchoosek(39ull, 12ull), 3910797436ull);
    EXPECT_EQ(nchoosek(38ull, 35ull), 8436ull);
    EXPECT_EQ(nchoosek(27ull, 17ull), 8436285ull);
    EXPECT_EQ(nchoosek(42ull, 41ull), 42ull);
    EXPECT_EQ(nchoosek(28ull, 14ull), 40116600ull);
    EXPECT_EQ(nchoosek(35ull, 12ull), 834451800ull);
    EXPECT_EQ(nchoosek(23ull, 20ull), 1771ull);
    EXPECT_EQ(nchoosek(50ull, 47ull), 19600ull);
    EXPECT_EQ(nchoosek(28ull, 11ull), 21474180ull);
    EXPECT_EQ(nchoosek(38ull, 28ull), 472733756ull);
    EXPECT_EQ(nchoosek(45ull, 18ull), 1715884494940ull);
    EXPECT_EQ(nchoosek(28ull, 18ull), 13123110ull);
    EXPECT_EQ(nchoosek(38ull, 7ull), 12620256ull);
    EXPECT_EQ(nchoosek(42ull, 2ull), 861ull);
    EXPECT_EQ(nchoosek(40ull, 19ull), 131282408400ull);
    EXPECT_EQ(nchoosek(13ull, 7ull), 1716ull);
}


TEST(Utils_test, sin_cos_solve_test)
{
    {
        const auto [_, valid] = sin_cos_solve(0., 0., 1.); (void)_;
        EXPECT_FALSE(valid);
    }

    {
        const auto [_, valid] = sin_cos_solve(1., 1., 10.); (void)_;
        EXPECT_FALSE(valid);
    }

    {
        const auto [_, valid] = sin_cos_solve(0., 1., 10.); (void)_;
        EXPECT_FALSE(valid);
    }

    {
        const auto [_, valid] = sin_cos_solve(1., 0., 10.); (void)_;
        EXPECT_FALSE(valid);
    }

    constexpr auto tolnear = 1e2 * std::numeric_limits<double>::epsilon();

    {
        const auto [sols, valid] = sin_cos_solve(1., 0., 1.);
        EXPECT_TRUE(valid);
        EXPECT_NEAR(sols[0], std::asin(1.), tolnear);
        EXPECT_NEAR(sols[1], wrap_to_pi(pi - sols[0]), tolnear);
    }

    {
        const auto [sols, valid] = sin_cos_solve(0., 1., 1.);
        EXPECT_TRUE(valid);
        EXPECT_NEAR(sols[0], std::acos(1.), tolnear);
        EXPECT_NEAR(sols[1], wrap_to_pi(-sols[0]), tolnear);
    }

    {
        const auto [sols, valid] = sin_cos_solve(0., 1., 1.);
        EXPECT_TRUE(valid);
        EXPECT_NEAR(sols[0], std::acos(1.), tolnear);
        EXPECT_NEAR(sols[1], wrap_to_pi(-sols[0]), tolnear);
    }

    {
        const auto [sols, valid] = sin_cos_solve(1., 1., std::sqrt(2));
        EXPECT_TRUE(valid);
        EXPECT_NEAR(sols[0], 0.25 * pi, tolnear);
        EXPECT_NEAR(sols[1], sols[0], tolnear);
    }

    {
        const auto [sols, valid] = sin_cos_solve(0.3, 0.45, 0.22);
        EXPECT_TRUE(valid);
        EXPECT_NEAR(sols[0], -0.56386708468522428, tolnear);
        EXPECT_NEAR(sols[1], 1.7398722917803591, tolnear);
    }
}


TEST(Utils_test, sumabs_test)
{
    constexpr auto n = 20000;
    std::vector<double> v(n);
    double sumabs_ = 0.;
    for (auto i = 0u; i < n; ++i) {
        v[i] = 100. * (double)rand() / (double)RAND_MAX - 50.;
        sumabs_ += std::abs(v[i]);
    }
    EXPECT_EQ(sumabs_, sumabs(v));
}


TEST(Utils_test, sumsqr_test)
{
    constexpr auto n = 20000;
    std::vector<double> v(n);
    double sumsqr_ = 0.;
    for (auto i = 0u; i < n; ++i) {
        v[i] = 100. * (double)rand() / (double)RAND_MAX - 50.;
        sumsqr_ += v[i] * v[i];
    }
    EXPECT_EQ(sumsqr_, sumsqr(v));
}


TEST(Utils_test, smooth_clamp_test)
{
    const auto lb = 0.123456;
    const auto ub = 0.98523;

    const auto x = linspace(lb - 1.0, ub + 1.0, 1000);

    for (const auto& xi : x)
    {
        EXPECT_NEAR(smooth_clamp(xi, lb, ub, 0.0), smooth_clamp<false>(xi, lb, ub, 0.0), 1.0e-15);
        EXPECT_NEAR(smooth_clamp(xi, lb, ub, 0.0), (xi > lb ? (xi < ub ? xi : ub) : lb), 1.0e-15);
        EXPECT_NEAR(smooth_clamp(xi, lb, ub, 1.0e-6), (xi > lb ? (xi < ub ? xi : ub) : lb), 4.0e-4);
    }
}


TEST(Utils_test, smooth_max_test)
{
    const auto lb = 0.123456;
    const auto ub = 0.98523;

    const auto x = linspace(lb - 1.0, ub + 1.0, 1000);

    for (const auto& xi : x)
    {
        EXPECT_NEAR(smooth_max(xi, lb, 0.0), smooth_max<false>(xi, lb, 0.0), 1.0e-15);
        EXPECT_NEAR(smooth_max(xi, lb, 0.0), (xi > lb ? xi : lb), 1.0e-15);
        EXPECT_NEAR(smooth_max(xi, lb, 1.0e-6), (xi > lb ? xi : lb), 4.0e-4);
    }
}


TEST(Utils_test, smooth_min_test)
{
    const auto lb = 0.123456;
    const auto ub = 0.98523;

    const auto x = linspace(lb - 1.0, ub + 1.0, 1000);

    for (const auto& xi : x)
    {
        EXPECT_NEAR(smooth_min(xi, ub, 0.0), smooth_min<false>(xi, ub, 0.0), 1.0e-15);
        EXPECT_NEAR(smooth_min(xi, ub, 0.0), (xi < ub ? xi : ub), 1.0e-15);
        EXPECT_NEAR(smooth_min(xi, ub, 1.0e-6), (xi < ub ? xi : ub), 4.0e-4);
    }
}


TEST(Utils_test, grid_vectors2points_flat)
{
    //
    // Tests the "grid_vectors2points_flat" & "grid_vectors2points" functions.
    //

    const auto reference_points_flat = std::vector<double>{
        0., 3., 6.,
        1., 3., 6.,
        2., 3., 6.,
        0., 4., 6.,
        1., 4., 6.,
        2., 4., 6.,
        0., 3., 7.,
        1., 3., 7.,
        2., 3., 7.,
        0., 4., 7.,
        1., 4., 7.,
        2., 4., 7.,
        0., 3., 8.,
        1., 3., 8.,
        2., 3., 8.,
        0., 4., 8.,
        1., 4., 8.,
        2., 4., 8.,
        0., 3., 9.,
        1., 3., 9.,
        2., 3., 9.,
        0., 4., 9.,
        1., 4., 9.,
        2., 4., 9. };

    const auto compare_results = [&](const auto &grid_vectors)
    {
        const auto points_flat = grid_vectors2points_flat(grid_vectors);
        ASSERT_EQ(points_flat.size(), reference_points_flat.size());
        for (auto i = 0u; i < reference_points_flat.size(); ++i) {
            EXPECT_EQ(points_flat[i], reference_points_flat[i]);
        }

        const auto points_per_dimension = grid_vectors2points(grid_vectors);
        const auto num_grid_vectors = grid_vectors.size();
        const auto num_points = reference_points_flat.size() / num_grid_vectors;
        ASSERT_EQ(points_per_dimension.size(), num_grid_vectors);
        for (auto dim = 0u; dim < num_grid_vectors; ++dim) {
            ASSERT_EQ(points_per_dimension[dim].size(), num_points);
            for (auto p = 0u; p < num_points; ++p) {
                EXPECT_EQ(points_per_dimension[dim][p], reference_points_flat[num_grid_vectors * p + dim]);
            }
        }
    };

    const auto grid_vectors_as_vector_of_vectors = std::vector<std::vector<double> >{
        { 0., 1., 2. },
        { 3., 4. },
        { 6., 7., 8., 9. } };
    compare_results(grid_vectors_as_vector_of_vectors);

    const auto grid_vectors_as_map_of_vectors = std::map<std::string, std::vector<double> >{
        { "grid0_x", grid_vectors_as_vector_of_vectors[0] },
        { "grid1_y", grid_vectors_as_vector_of_vectors[1] },
        { "grid2_z", grid_vectors_as_vector_of_vectors[2] } };
    compare_results(grid_vectors_as_map_of_vectors);

    const auto grid_vectors_as_vector_of_pairs = std::vector<std::pair<std::string, std::vector<double> > >{
        { "blabla", grid_vectors_as_vector_of_vectors[0] },
        { "aablabla", grid_vectors_as_vector_of_vectors[1] },
        { "ablabla", grid_vectors_as_vector_of_vectors[2] } };
    compare_results(grid_vectors_as_map_of_vectors);
}


TEST(Utils_test, nearest_in_sorted_range_test)
{
    //
    // Tests the "nearest_in_sorted_range" function
    // against an implementation that should be equivalent.
    //

    const auto index_of_closest_element_in_grid_vector = [](
        const auto &grid_vector, auto value)
    {
        const auto closest_above = std::lower_bound(std::cbegin(grid_vector), std::cend(grid_vector), value);
        if (closest_above != std::cend(grid_vector)) {
            if (closest_above != std::cbegin(grid_vector)) {
                const auto right = static_cast<std::size_t>(std::distance(std::cbegin(grid_vector), closest_above));
                const auto left = right - std::size_t{ 1 };
                return (value - grid_vector[left]) < (*closest_above - value) ? left : right;
            }
            else {
                return std::size_t{ 0 };
            }
        }
        else {
            return static_cast<std::size_t>(grid_vector.size()) - std::size_t{ 1 };
        }
    };

    constexpr auto num_tests = 1000u;

    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_real_distribution<double> distr(0., 1.);
    const auto rand_in_limits = [&](double lo, double hi)
    {
        return (hi - lo) * distr(generator) + lo;
    };

    for (auto t = 0u; t < num_tests; ++t) {
        const auto num_points_range = static_cast<std::size_t>(rand_in_limits(1, 1000));
        std::vector<double> range(num_points_range);
        std::generate(range.begin(), range.end(), [&]() { return rand_in_limits(-100., 100.); });
        std::sort(range.begin(), range.end());

        std::vector<double> values;
        if (t == 0u) {
            values = range;
        }
        else if (t == 1) {
            values.resize(range.size() - 1u);
            for (auto i = 0u; i < range.size() - 1u; ++i) {
                values[i] = 0.5 * (range[i] + range[i + 1]);
            }
        }
        else {
            const auto num_values = static_cast<std::size_t>(rand_in_limits(1, 1000));
            values.resize(num_values);
            std::generate(values.begin(), values.end(), [&]() { return rand_in_limits(-100., 100.); });
        }

        for (auto val : values) {
            const auto i = std::distance(range.cbegin(), nearest_in_sorted_range(range.cbegin(), range.cend(), val));
            const auto i_alt = index_of_closest_element_in_grid_vector(range, val);
            EXPECT_EQ(static_cast<std::size_t>(i), i_alt);
        }
    }
}


TEST(Utils_test, smooth_pos_derivatives)
{
    //
    // Check that the derivatives of the smooth_pos_function
    // are correct
    //

    using AD = CppAD::AD<scalar>;


    // tape the smooth_pos function
    auto a_x = std::vector<AD>{AD{ 0 }};
    CppAD::Independent(a_x);

    auto a_y = std::vector<AD>{smooth_pos(a_x[0], scalar{ 0.01 })};

    auto f = CppAD::ADFun<scalar>{};
    f.Dependent(a_x, a_y);

    const auto x_values = linspace(-10.0, 10.0, 200);

    for (auto& x : x_values) {
        
        // first derivative
        const auto dydx_analytical = smooth_pos_derivative(x, scalar{ 0.01 });
        const auto dydx_ad = f.Jacobian(std::vector<scalar>{x})[0];
        EXPECT_DOUBLE_EQ(dydx_analytical, dydx_ad);

        // second derivative
        const auto d2ydx2_analytical = smooth_pos_second_derivative(x, scalar{ 0.01 });;
        const auto d2ydx2_ad = f.Hessian(std::vector<scalar>{x}, std::vector<scalar>{scalar{1}})[0];
        EXPECT_NEAR(d2ydx2_analytical, d2ydx2_ad, 2.0e-15);
    }
}


TEST(Utils_test, smooth_neg_derivatives)
{
    //
    // Check that the derivatives of the smooth_neg_function
    // are correct
    //

    using AD = CppAD::AD<scalar>;


    // tape the smooth_neg function
    auto a_x = std::vector<AD>{AD{ 0 }};
    CppAD::Independent(a_x);

    auto a_y = std::vector<AD>{smooth_neg(a_x[0], scalar{ 0.01 })};

    auto f = CppAD::ADFun<scalar>{};
    f.Dependent(a_x, a_y);

    const auto x_values = linspace(-10.0, 10.0, 200);

    for (auto& x : x_values) {
        
        // first derivative
        const auto dydx_analytical = smooth_neg_derivative(x, scalar{ 0.01 });
        const auto dydx_ad = f.Jacobian(std::vector<scalar>{x})[0];
        EXPECT_DOUBLE_EQ(dydx_analytical, dydx_ad);

        // second derivative
        const auto d2ydx2_analytical = smooth_neg_second_derivative(x, scalar{ 0.01 });;
        const auto d2ydx2_ad = f.Hessian(std::vector<scalar>{x}, std::vector<scalar>{scalar{1}})[0];
        EXPECT_NEAR(d2ydx2_analytical, d2ydx2_ad, 2.0e-15);
    }
}


TEST(Utils_test, smooth_clamp_derivatives)
{
    //
    // Check that the derivatives of the smooth_clamp_function
    // are correct
    //

    using AD = CppAD::AD<scalar>;


    // tape the smooth_clamp function
    auto a_x = std::vector<AD>{AD{ 0 }};
    CppAD::Independent(a_x);

    auto a_y = std::vector<AD>{smooth_clamp(a_x[0], scalar{-3}, scalar{5}, scalar{ 0.01 })};

    auto f = CppAD::ADFun<scalar>{};
    f.Dependent(a_x, a_y);

    const auto x_values = linspace(-10.0, 10.0, 200);

    for (auto& x : x_values) {
        
        // first derivative
        const auto dydx_analytical = smooth_clamp_derivative(x, scalar{-3}, scalar{5}, scalar{ 0.01 });
        const auto dydx_ad = f.Jacobian(std::vector<scalar>{x})[0];
        EXPECT_DOUBLE_EQ(dydx_analytical, dydx_ad);

        // second derivative
        const auto d2ydx2_analytical = smooth_clamp_second_derivative(x, scalar{-3}, scalar{5}, scalar{ 0.01 });;
        const auto d2ydx2_ad = f.Hessian(std::vector<scalar>{x}, std::vector<scalar>{scalar{1}})[0];
        EXPECT_NEAR(d2ydx2_analytical, d2ydx2_ad, 2.0e-15);
    }
}
